import { setTempRet0 } from 'env';

function asmFunc(global, env) {
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var setTempRet0 = env.setTempRet0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 function legalstub$0($0, $1, $2, $3) {
  _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
  i64toi32_i32$HIGH_BITS = __wasm_intrinsics_temp_i64$hi;
  $0 = __wasm_intrinsics_temp_i64;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$11 : {
            $4 = $1;
            if ($4) {
             $5 = $2;
             if (!$5) {
              break label$11
             }
             $6 = $3;
             if (!$6) {
              break label$9
             }
             $4 = Math_clz32($6) - Math_clz32($4) | 0;
             if ($4 >>> 0 <= 31) {
              break label$8
             }
             break label$2;
            }
            if (($3 | 0) == 1 | $3 >>> 0 > 1) {
             break label$2
            }
            __wasm_intrinsics_temp_i64 = $0 - Math_imul(($0 >>> 0) / ($2 >>> 0) | 0, $2) | 0;
            __wasm_intrinsics_temp_i64$hi = 0;
            i64toi32_i32$HIGH_BITS = 0;
            return;
           }
           $5 = $3;
           if (!$0) {
            break label$7
           }
           if (!$5) {
            break label$6
           }
           $6 = $5 + -1 | 0;
           if ($6 & $5) {
            break label$6
           }
           __wasm_intrinsics_temp_i64 = $0;
           __wasm_intrinsics_temp_i64$hi = $4 & $6;
           __wasm_ctz_i32($5);
           i64toi32_i32$HIGH_BITS = 0;
           return;
          }
          $6 = $5 + -1 | 0;
          if (!($6 & $5)) {
           break label$5
          }
          $6 = (Math_clz32($5) + 33 | 0) - Math_clz32($4) | 0;
          $8 = 0 - $6 | 0;
          break label$3;
         }
         $6 = $4 + 1 | 0;
         $8 = 63 - $4 | 0;
         break label$3;
        }
        __wasm_intrinsics_temp_i64 = 0;
        __wasm_intrinsics_temp_i64$hi = $4 - Math_imul(($4 >>> 0) / ($5 >>> 0) | 0, $5) | 0;
        i64toi32_i32$HIGH_BITS = 0;
        return;
       }
       $4 = Math_clz32($5) - Math_clz32($4) | 0;
       if ($4 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      __wasm_intrinsics_temp_i64 = $0 & $6;
      __wasm_intrinsics_temp_i64$hi = 0;
      if (($5 | 0) == 1) {
       break label$1
      }
      $3 = __wasm_ctz_i32($5);
      $2 = $3 & 31;
      if (($3 & 63) >>> 0 >= 32) {
       $5 = 0
      } else {
       $5 = $1 >>> $2 | 0
      }
      i64toi32_i32$HIGH_BITS = $5;
      return;
     }
     $6 = $4 + 1 | 0;
     $8 = 63 - $4 | 0;
    }
    $4 = $1;
    $5 = $6 & 63;
    $7 = $5 & 31;
    if ($5 >>> 0 >= 32) {
     $5 = 0;
     $7 = $4 >>> $7 | 0;
    } else {
     $5 = $4 >>> $7 | 0;
     $7 = ((1 << $7) - 1 & $4) << 32 - $7 | $0 >>> $7;
    }
    $8 = $8 & 63;
    $4 = $8 & 31;
    if ($8 >>> 0 >= 32) {
     $1 = $0 << $4;
     $0 = 0;
    } else {
     $1 = (1 << $4) - 1 & $0 >>> 32 - $4 | $1 << $4;
     $0 = $0 << $4;
    }
    if ($6) {
     $4 = $3 + -1 | 0;
     $9 = $4 + 1 | 0;
     $8 = $4;
     $4 = $2 + -1 | 0;
     $8 = ($4 | 0) != -1 ? $9 : $8;
     while (1) {
      $9 = $7 << 1 | $1 >>> 31;
      $10 = $9;
      $5 = $5 << 1 | $7 >>> 31;
      $9 = $8 - ($5 + ($4 >>> 0 < $9 >>> 0) | 0) | 0;
      $11 = $9 >> 31;
      $12 = $2 & $11;
      $7 = $10 - $12 | 0;
      $5 = $5 - (($9 >> 31 & $3) + ($10 >>> 0 < $12 >>> 0) | 0) | 0;
      $1 = $1 << 1 | $0 >>> 31;
      $0 = $13 | $0 << 1;
      $13 = $11 & 1;
      $6 = $6 + -1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    __wasm_intrinsics_temp_i64 = $7;
    __wasm_intrinsics_temp_i64$hi = $5;
    i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
    return;
   }
   __wasm_intrinsics_temp_i64 = $0;
   __wasm_intrinsics_temp_i64$hi = $1;
   $1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1;
 }
 
 function __wasm_ctz_i32($0) {
  if ($0) {
   return 31 - Math_clz32($0 + -1 ^ $0) | 0
  }
  return 32;
 }
 
 return {
  "rem_u": legalstub$0
 };
}

var retasmFunc = asmFunc({
    Math,
    Int8Array,
    Uint8Array,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array,
    NaN,
    Infinity
  }, {
    abort: function() { throw new Error('abort'); },
    setTempRet0
  });
export var rem_u = retasmFunc.rem_u;
