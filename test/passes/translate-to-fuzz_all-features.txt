weird num 0
weird num -1
weird num 2147483647
weird num 3
weird num 0
weird num 1651800448
weird num 0
weird num -1
weird num 0
weird num 577410030337349248
weird num 2147483647
weird num 0
weird num 3379283
weird num 0
weird num 0
weird num -833811200
weird num 2147483647
weird num 0
weird num -1
weird num 0
weird num 3709952786477184512
weird num 1474434627059596800
weird num 0
weird num 0
weird num 0
weird num 2147483647
weird num 2147483647
weird num 0
weird num 0
weird num 0
weird num 195
(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $i64_i64_exnref_=>_none (func (param i64 i64 exnref)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $f64_i64_exnref_i64_externref_i64_=>_i32 (func (param f64 i64 exnref i64 externref i64) (result i32)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 0 0 funcref)
 (global $global$5 (mut f32) (f32.const 73))
 (global $global$4 (mut (externref v128 i64)) (tuple.make
  (ref.null)
  (v128.const i32x4 0x00550000 0xfffe0028 0x00000000 0x00030000)
  (i64.const 281474976710657)
 ))
 (global $global$3 (mut exnref) (ref.null))
 (global $global$2 (mut exnref) (ref.null))
 (global $global$1 (mut externref) (ref.null))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_8" (func $func_8))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11" (func $func_11))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (param $0 i64) (param $1 i64) (param $2 exnref)
  (local $3 funcref)
  (local $4 (funcref funcref v128 externref))
  (local $5 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (drop
    (ref.null)
   )
  )
 )
 (func $func_9 (param $0 i32)
  (local $1 nullref)
  (local $2 v128)
  (local $3 i64)
  (local $4 f64)
  (local $5 externref)
  (local $6 externref)
  (local $7 (exnref funcref))
  (local $8 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (global.set $global$1
    (block $label$1
     (nop)
     (br $label$0)
    )
   )
   (if
    (i32.const 525295180)
    (block $label$2
     (local.set $1
      (local.tee $1
       (if (result nullref)
        (i32.eqz
         (local.tee $0
          (i32.const 0)
         )
        )
        (if (result nullref)
         (i32.eqz
          (local.get $0)
         )
         (block $label$18 (result nullref)
          (local.set $0
           (loop $label$19 (result i32)
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return)
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block (result i32)
             (block $label$20
              (br_if $label$19
               (i32.eqz
                (local.tee $0
                 (i32.eqz
                  (local.tee $0
                   (if (result i32)
                    (local.get $0)
                    (block $label$21 (result i32)
                     (nop)
                     (local.get $0)
                    )
                    (local.get $0)
                   )
                  )
                 )
                )
               )
              )
              (local.tee $5
               (if
                (i32.eqz
                 (local.get $0)
                )
                (block $label$22
                 (br_if $label$20
                  (i32.eqz
                   (local.get $0)
                  )
                 )
                 (tuple.extract 1
                  (loop $label$23
                   (block
                    (if
                     (i32.eqz
                      (global.get $hangLimit)
                     )
                     (return)
                    )
                    (global.set $hangLimit
                     (i32.sub
                      (global.get $hangLimit)
                      (i32.const 1)
                     )
                    )
                   )
                   (block $label$24
                    (br $label$19)
                   )
                  )
                 )
                )
                (block $label$25
                 (drop
                  (block $label$26 (result externref)
                   (if
                    (i32.eqz
                     (i32.const 3379283)
                    )
                    (nop)
                    (call $log-nullref
                     (ref.null)
                    )
                   )
                   (local.get $6)
                  )
                 )
                 (br $label$19)
                )
               )
              )
             )
             (br_if $label$19
              (i32.eqz
               (i8x16.extract_lane_u 0
                (v128.const i32x4 0x0dff0100 0x00ff00ff 0x00000014 0xffff2146)
               )
              )
             )
             (block $label$27 (result i32)
              (memory.init 0
               (i32.and
                (atomic.notify offset=2
                 (i32.and
                  (local.get $0)
                  (i32.const 15)
                 )
                 (ref.is_null
                  (ref.null)
                 )
                )
                (i32.const 15)
               )
               (i32.const 19)
               (i32.const 1)
              )
              (loop $label$28 (result i32)
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return)
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (block (result i32)
                (block $label$29
                 (nop)
                 (loop $label$30
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return)
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (block $label$31
                   (if
                    (i32.eqz
                     (local.tee $0
                      (local.tee $0
                       (local.get $0)
                      )
                     )
                    )
                    (i64.atomic.store offset=22
                     (i32.and
                      (i32.const 1296846389)
                      (i32.const 15)
                     )
                     (i64.div_u
                      (local.get $8)
                      (i64.const 129)
                     )
                    )
                    (block $label$32
                     (if
                      (i32.eqz
                       (i32.const 1)
                      )
                      (nop)
                      (f32.store offset=4
                       (i32.and
                        (local.get $0)
                        (i32.const 15)
                       )
                       (f32.const -2046.0989990234375)
                      )
                     )
                     (drop
                      (local.get $0)
                     )
                    )
                   )
                   (call $log-exnref
                    (tuple.extract 2
                     (tuple.make
                      (f64.const -4398046511103.816)
                      (v128.const i32x4 0x0000000b 0x00000000 0x00000020 0x00000000)
                      (ref.null)
                      (f32.const 1410944640)
                     )
                    )
                   )
                  )
                 )
                )
                (br_if $label$28
                 (local.get $0)
                )
                (block $label$33 (result i32)
                 (br_if $label$33
                  (local.get $0)
                  (i32.eqz
                   (if (result i32)
                    (i32.eqz
                     (i32.const 513)
                    )
                    (local.get $0)
                    (i32.const 268435457)
                   )
                  )
                 )
                )
               )
              )
             )
            )
           )
          )
          (local.get $1)
         )
         (block $label$34 (result nullref)
          (nop)
          (ref.null)
         )
        )
        (block $label$35
         (nop)
         (return)
        )
       )
      )
     )
     (nop)
    )
    (block $label$10
     (if
      (i32.atomic.load offset=4
       (i32.and
        (loop $label$57
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return)
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$58
          (f64.store
           (i32.and
            (local.get $0)
            (i32.const 15)
           )
           (local.get $4)
          )
          (br $label$57)
         )
        )
        (i32.const 15)
       )
      )
      (nop)
      (block $label$11
       (block $label$12
        (nop)
        (drop
         (f32.const 9)
        )
        (loop $label$13
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return)
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$14
          (local.set $2
           (v8x16.shuffle 15 7 6 13 8 17 8 3 10 5 31 24 23 8 3 10
            (v128.load offset=2 align=8
             (i32.and
              (i32.const 0)
              (i32.const 15)
             )
            )
            (local.tee $2
             (local.tee $2
              (f64x2.abs
               (v128.load offset=4 align=4
                (i32.and
                 (i32.const -67108865)
                 (i32.const 15)
                )
               )
              )
             )
            )
           )
          )
          (nop)
         )
        )
       )
       (f32.store offset=22
        (i32.and
         (ref.is_null
          (ref.null)
         )
         (i32.const 15)
        )
        (f32.const -1651800448)
       )
      )
     )
     (local.set $8
      (select
       (local.get $3)
       (local.get $3)
       (i16x8.extract_lane_u 5
        (local.get $2)
       )
      )
     )
    )
   )
  )
 )
 (func $func_9_invoker
  (call $func_9
   (i32.const 0)
  )
  (call $func_9
   (i32.const -8388607)
  )
 )
 (func $func_11 (param $0 f64) (param $1 i64) (param $2 exnref) (param $3 i64) (param $4 externref) (param $5 i64) (result i32)
  (local $6 f32)
  (local $7 externref)
  (local $8 i64)
  (local $9 (funcref exnref v128))
  (local $10 exnref)
  (local $11 funcref)
  (local $12 exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 268435456)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i32
    (call $hashMemory)
   )
   (return
    (i32.const 194)
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
